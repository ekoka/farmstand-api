import os
import locale
from collections import namedtuple
import logging
from . import secrets

SECRET_KEY = secrets.SECRET_KEY

# ------------------------- #
# I18N and L10N

LOCALE = 'fr_CA.UTF-8'
locale.setlocale(locale.LC_ALL, LOCALE)

DEFAULT_LANG = 'en'
AVAILABLE_LANGS = ['en', 'fr']

#BABEL_DOMAIN = 'messages'
BABEL_TRANSLATION_DIRECTORIES = 'translations'

# ------------------------- #

PROJECT_NAME = 'b2bapi'
# PATHS
filepath = os.path.realpath(__file__)
APP_PATH = os.path.dirname(os.path.dirname(filepath))
PROJECT_PATH = os.path.dirname(APP_PATH)

# logging
LOGGING_PATH = os.path.join(PROJECT_PATH, 'logs/coding.log')
fh = logging.FileHandler(LOGGING_PATH)
LOGGER = logging.getLogger('b2bapi')
LOGGER.setLevel(logging.INFO)
LOGGER.addHandler(fh)

# static files
STATIC_PATH = os.path.join(PROJECT_PATH, 'static')

AspectRatio = namedtuple('AspectRatio', 'vertical horizontal')
IMAGE = dict(
    DUMP = '/home/mike/tmp/simpleb2b/images/tests/',
    MAX_FILESIZE = 10000000, #10mb
    ASPECT_RATIO = AspectRatio(0.3333, 3.0), # 3:1 (vertical, horizontal)
    WEB_MAX_LENGTH = 900, # max width/height length
    SUPPORTED_FORMATS = {'JPEG': 'jpg', 'JPG': 'jpg', 'PNG': 'png'},
)

THUMBOR_SERVER = secrets.THUMBOR_SERVER
THUMBOR_SECURITY_KEY = secrets.THUMBOR_SECURITY_KEY

GMAIL_LOGIN = secrets.GMAIL_LOGIN
GMAIL_PASSWORD = secrets.GMAIL_PASSWORD

connect_string = "{dialect}://{user}:{password}@{host}/{dbname}".format(
    dialect=secrets.DB_DIALECT, user=secrets.DB_USER, 
    password=secrets.DB_PASSWORD, host=secrets.DB_HOST,
    dbname=secrets.DB_NAME)
ident_connect_string = "{dialect}:///{dbname}".format(
    dialect=secrets.DB_DIALECT, dbname=secrets.DB_NAME)
FORCE_CREATE_DB_SCHEMA = False
SQLALCHEMY_DATABASE_URI = connect_string

SQLALCHEMY_TRACK_MODIFICATIONS = False

SQLALCHEMY_COMMIT_ON_TEARDOWN = True
# SQL ALCHEMY PROFILER
ENABLE_SQL_PROFILE_LOG = False

HOST = 'demo.simpleb2b.local'
SERVER_DOMAIN = 'simpleb2b.local'
HTTP_PORT = 8081

DEV_MODE = False
DEBUG = True
TESTING = False
DEMO = True

if DEMO:
    FORCE_CREATE_DB_SCHEMA = True
    assert secrets.DB_NAME.startswith('demo_') or secrets.DB_NAME.endswith('_demo')

if TESTING:
    assert secrets.DB_NAME.startswith('test_') or secrets.DB_NAME.endswith('_test')
    assert HOST.startswith('test.')
